{"version":3,"sources":["components/Chat/Chat.module.scss","components/Header/Header.module.scss","components/AuthForm/AuthForm.module.scss","components/MessageForm/MessageForm.module.scss","components/AuthPage/AuthPage.module.scss","components/common/FormControls/FormsControls.module.scss","components/common/Loader/Loader.module.scss","redux/auth/selectors.ts","api/firebase/firebase.ts","api/firebase/authAPI.ts","api/models/user.ts","api/mappers/user-mapper.ts","redux/auth/auth.ts","components/Header/MaterialStyles.ts","components/Header/Header.tsx","components/common/FormControls/MaterialStyles.ts","components/common/FormControls/FormControls.tsx","components/AuthForm/AuthForm.tsx","components/LoginForm/LoginFrom.tsx","utils/validators.ts","components/RegistrationForm/RegistrationFrom.tsx","components/AuthPage/AuthPage.tsx","redux/app/app.ts","redux/app/selectors.ts","hocs/withAuthRedirect.tsx","components/MessageControls/MaterialStyles.ts","components/MessageControls/MessageControls.tsx","components/MessageItem/MaterialStyles.ts","components/MessageItem/MessageItem.tsx","components/MessageForm/MaterialStyles.ts","components/MessageForm/MessageForm.tsx","components/Chat/Chat.tsx","api/firebase/chatAPI.ts","api/models/message.ts","api/mappers/message-mapper.ts","utils/formatDate.ts","utils/chatFuncsCreators.ts","utils/messagesListUtils.ts","redux/workChat/workChat.ts","redux/workChat/selectors.ts","components/WorkChatPage/WorkChatPage.tsx","redux/floodChat/selectors.ts","redux/floodChat/floodChat.ts","components/FloodChatPage/FloodChatPage.tsx","components/common/Loader/Loader.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx","components/MessageItem/MessageItem.module.scss"],"names":["module","exports","getIsAuth","state","auth","isAuth","getActiveUser","activeUser","getDefaultImg","defaultImg","gerIsSendingAuth","isSending","getErrorMessage","errorMessage","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","mainRequest","collection","authAPI","login","doc","toLowerCase","get","then","response","password","set","User","data","imgUrl","id","this","UserMapper","userData","getHash","str","shajs","update","digest","setErrorMessageAction","createAction","toggleIsSendingAction","setActiveUserAction","createReducer","type","action","payload","setActiveUser","dispatch","initialApp","a","localStorage","getItem","userId","setLocalStorage","setItem","registrationFunc","exists","catch","error","authFuncCreator","registration","logout","removeItem","useStyles","makeStyles","tabs","width","title","textTransform","whiteSpace","padding","button","marginTop","marginLeft","Header","props","user","useSelector","useDispatch","image","logutFunc","HeaderComponent","classes","location","useLocation","React","useState","value","setValue","useEffect","pathname","AppBar","position","className","s","wrapper","Toolbar","variant","Typography","Tabs","indicatorColor","Tab","label","activeClassName","to","component","NavLink","disabled","Avatar","alt","src","Button","color","onClick","control","marginBottom","textarea","display","resize","border","borderBottom","outline","borderBottomColor","ErrorALert","children","Alert","severity","InputControl","field","form","styles","fieldWrapper","Input","fullWidth","name","AuthForm","isLogin","registrationPassword","placeholder","errorAlert","alert","autoComplete","LoginForm","handleSubmit","registrateValidations","Yup","required","initialValues","onSubmit","validationSchema","passwordsMatch","parent","RegistrationForm","min","repeatPassword","test","AuthPage","loginFunc","loginThunk","registrationtFunc","AuthPageComponent","setIsLogin","btnText","formTitle","initAppAction","initial","initialized","getInitialized","withAuthRedirect","Component","edit","icon","marginRight","MessageControls","onEditMessage","onDeleteMessage","anchorEl","setAnchorEl","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","avatar","height","objectFit","message","margin","reaction","transition","alignItems","opacity","reactionActive","MessageItem","MessageItemComponent","messageData","currentUser","setEditMessage","onAddReaction","onRemoveReaction","userAvatar","isCurrentUser","isLiked","likesIds","some","controls","userLogin","Card","card","CardContent","userName","parse","stateWrapper","date","endIcon","length","btn","borderRadius","MessageForm","onSendMessage","isEdit","messageToEdit","removeEditMessage","onUpdateMessage","setMessage","cancelBtn","theme","messageControl","onChange","evt","btnsWrapper","Chat","messages","setIsEdit","setMessageToEdit","messagesEndRef","useRef","current","scrollIntoView","behavior","messagesList","map","chatWrapper","ref","workChatRequest","floodChatRequest","ChatAPI","mainRequsest","orderBy","add","merge","delete","workChatAPI","floodChatAPI","Message","MessageMapper","author","string","toDate","toString","Date","toLocaleDateString","year","month","day","hour","minute","setMessagesCreator","api","addAction","deleteAction","getMessages","onSnapshot","docChanges","forEach","messageResponse","messageDto","authorResponse","authorDto","authorId","sendMessageCreator","sendMessage","updateMessageCreator","messageId","updateMessage","addMessageReactionCreator","uesrId","setMessageReactions","removeMessageReactionCreator","filter","deleteMessageCreator","deleteMessage","createNewMessagesList","oldMessages","newMessage","changeMessageIndex","index","isNotUnic","push","removeMessage","newMessages","i","splice","setMessageAction","deleteMessageAction","workChat","setMessagesSub","addMessageReaction","removeMessageReaction","WorkChatPageComponent","WorkChatPage","floodChat","FloodChatPageComponent","FloodChatPage","Loader","CircularProgress","size","App","AppComponent","path","render","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","crateStore","reducer","middleware","getDefaultMiddleware","serializableCheck","mainTheme","createMuiTheme","palette","primary","main","ReactDOM","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.a8cec1f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Chat_wrapper__szEhR\",\"title\":\"Chat_title__1I3Cb\",\"chatWrapper\":\"Chat_chatWrapper__xV5Wu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__DzoR1\",\"logout\":\"Header_logout__3d08z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AuthForm_form__2Jlax\",\"alert\":\"AuthForm_alert__3k84p\",\"submit-btn\":\"AuthForm_submit-btn__1q_wM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnsWrapper\":\"MessageForm_btnsWrapper__1toP4\",\"messageControl\":\"MessageForm_messageControl__3E7gR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AuthPage_wrapper__Fekqc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldWrapper\":\"FormsControls_fieldWrapper__1zWBL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Loader_wrapper__3akGL\"};","import { RootState } from '../redux-store';\r\nimport {User} from '../../api/models/user';\r\n\r\nexport const getIsAuth = (state: RootState): boolean => (\r\n    state.auth.isAuth\r\n)\r\n\r\nexport const getActiveUser = (state: RootState): User | null => (\r\n    state.auth.activeUser\r\n)\r\n\r\nexport const getLogin= (state: RootState): string => (\r\n    state.auth.login\r\n)\r\n\r\nexport const getDefaultImg = (state: RootState): string => (\r\n    state.auth.defaultImg\r\n)\r\n\r\nexport const gerIsSendingAuth = (state: RootState): boolean => (\r\n    state.auth.isSending\r\n)\r\n\r\nexport const getErrorMessage = (state: RootState): string => (\r\n    state.auth.errorMessage\r\n)\r\n","import firebase from 'firebase';\r\n\r\nfirebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_FIREBASE_API,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJCET,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGE,\r\n    appId: process.env.REACT_APP_FIREBASE_APP\r\n});\r\n\r\nexport const db = firebase.firestore();","import { db } from './firebase';\r\n\r\nconst mainRequest = db.collection('users');\r\n\r\nexport const authAPI = {\r\n    getUser(login: string) {\r\n        return mainRequest\r\n            .doc(login.toLowerCase()).get().then((response) =>\r\n                response\r\n            )\r\n    },\r\n    setUser(login: string, password: string): Promise<boolean> {\r\n        return mainRequest\r\n            .doc(login.toLowerCase()).set({\r\n                login,\r\n                password,\r\n            }).then(() =>\r\n                true\r\n            )\r\n    }\r\n}","import { ConstructorInitArg } from '../../utils/constructorInitArg';\r\n\r\nexport interface UserAuth {\r\n    login: string;\r\n    password: string;\r\n}\r\n\r\nexport class User {\r\n    public login: string;\r\n    public imgUrl: string;\r\n    public id: string;\r\n\r\n    constructor(data: ConstructorInitArg<User>) {\r\n        this.login = data.login;\r\n        this.imgUrl = data.imgUrl;\r\n        this.id = data.id;\r\n    }\r\n}","import { User } from '../models/user';\r\nimport {UserDto} from '../dtos/user-dto';\r\n\r\nexport const UserMapper = {\r\n    getUser(userData: UserDto, id: string): User {\r\n        return new User({\r\n            login: userData.login,\r\n            imgUrl: userData.imgUrl,\r\n            id: id,\r\n        });\r\n    },\r\n}","import { createAction, createReducer } from '@reduxjs/toolkit';\r\nimport shajs from 'sha.js';\r\nimport { authAPI } from '../../api/firebase/authAPI';\r\nimport { AppDispatch } from '../redux-store';\r\nimport firebase from 'firebase';\r\nimport { User } from '../../api/models/user';\r\nimport { UserMapper } from '../../api/mappers/user-mapper';\r\nimport { UserDto } from '../../api/dtos/user-dto';\r\n\r\nconst getHash = (str: string): string => shajs('sha256')\r\n    .update(str).digest('hex');\r\n\r\nconst initialState = {\r\n    isAuth: false,\r\n    isSending: false,\r\n    login: '',\r\n    errorMessage: '',\r\n    activeUser: null as User | null,\r\n    defaultImg: 'https://i.pinimg.com/736x/77/21/8b/77218b853cbd054f1e3395f55b36a43d--raccoon-illustration-graphic-illustration.jpg'\r\n}\r\n\r\ntype SetActiveUserDataPayload = {\r\n    userData: User | null;\r\n    isAuth: boolean;\r\n}\r\n\r\nconst setErrorMessageAction = createAction<string>('SET_ERROR_MESSAGE/AUTH');\r\nconst toggleIsSendingAction = createAction<boolean>('TOGGLE_IS_SENDING/AUTH');\r\nconst setActiveUserAction = createAction<SetActiveUserDataPayload>('SET_ACTIVE_USER/AUTH');\r\n\r\nexport const auth = createReducer(initialState, {\r\n    [setErrorMessageAction.type]: (state, action) => {\r\n        state.errorMessage = action.payload;\r\n    },\r\n    [toggleIsSendingAction.type]: (state, action) => {\r\n        state.isSending = action.payload;\r\n    },\r\n    [setActiveUserAction.type]: (state, action) => {\r\n        state.activeUser = action.payload.userData;\r\n        state.isAuth = action.payload.isAuth;\r\n    },\r\n});\r\n\r\nexport const setActiveUser = (\r\n    userData: User | null,\r\n    isAuth: boolean\r\n) => (dispatch: AppDispatch): void => {\r\n    dispatch(setActiveUserAction({userData, isAuth}));\r\n}\r\n\r\nexport const initialApp = () => async (dispatch: AppDispatch): Promise<void> => {\r\n    const login = localStorage.getItem('user');\r\n\r\n    if (login) {\r\n        const response: any = await authAPI.getUser(login);\r\n        const userData: UserDto = response.data();\r\n        const userId: string = response.id;\r\n\r\n        dispatch(setActiveUser(UserMapper.getUser(userData, userId), true));\r\n    } else {\r\n        dispatch(setActiveUser(null, false));\r\n    }\r\n}\r\n\r\nexport const closeError = () => (dispatch: AppDispatch): void => {\r\n    dispatch(setErrorMessageAction(''));\r\n}\r\n\r\nconst setLocalStorage = (login: string): void => {\r\n    localStorage.setItem('user', login);\r\n}\r\n\r\nconst removeLocalStorage = (): void => {\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nconst loginFunc = (\r\n    login: string,\r\n    password: string,\r\n    response: any,\r\n    dispatch: AppDispatch\r\n): void => {\r\n    if (!response.exists || response.data().password !== getHash(password)) {\r\n        dispatch(setErrorMessageAction('Incorrect login or password'));\r\n        return;\r\n    }\r\n\r\n    setLocalStorage(login);\r\n    dispatch(initialApp());\r\n}\r\n\r\nconst registrationFunc = async (\r\n    login: string,\r\n    password: string,\r\n    response: firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>,\r\n    dispatch: AppDispatch\r\n): Promise<void> => {\r\n    if (response.exists) {\r\n        dispatch(setErrorMessageAction('this login is already taken'));\r\n        return;\r\n    }\r\n\r\n    await authAPI.setUser(login, getHash(password)).catch(error => {\r\n        dispatch(setErrorMessageAction(error));\r\n    });\r\n\r\n    setLocalStorage(login);\r\n    dispatch(initialApp());\r\n}\r\n\r\ntype FuncCreator = (action: typeof loginFunc) =>\r\n    (login: string, password: string) =>\r\n        (dispatch: AppDispatch) => Promise<void>;\r\n\r\nconst authFuncCreator: FuncCreator = (action) =>\r\n    (login, password) =>\r\n        async (dispatch: AppDispatch) => {\r\n            dispatch(toggleIsSendingAction(true));\r\n            const response = await authAPI.getUser(login);\r\n\r\n            action(login, password, response, dispatch);\r\n\r\n            dispatch(toggleIsSendingAction(false));\r\n        }\r\n\r\nexport const login = authFuncCreator(loginFunc);\r\nexport const registration = authFuncCreator(registrationFunc);\r\n\r\nexport const logout = () => (dispatch: AppDispatch) => {\r\n    removeLocalStorage();\r\n    dispatch(initialApp());\r\n}\r\n","import { makeStyles } from '@material-ui/core';\r\n\r\nexport const useStyles = makeStyles({\r\n    tabs: {\r\n        width: '100%',\r\n    },\r\n    title: {\r\n        textTransform: 'uppercase',\r\n        whiteSpace: 'nowrap',\r\n        padding: '5px 40px',\r\n    },\r\n    button: {\r\n        marginTop: '4px',\r\n        marginLeft: '10px',\r\n    }\r\n});","import { AppBar, Avatar, Button, Tab, Tabs, Toolbar, Typography } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\nimport s from './Header.module.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getActiveUser, getDefaultImg } from '../../redux/auth/selectors';\r\nimport { logout } from '../../redux/auth/auth';\r\nimport { useStyles } from './MaterialStyles';\r\n\r\nexport const Header: React.FC = (props) => {\r\n    const user = useSelector(getActiveUser);\r\n    const defaultImg = useSelector(getDefaultImg);\r\n    const dispatch = useDispatch();\r\n\r\n    const login = user ? user.login : '';\r\n    const image = user?.imgUrl ? user.imgUrl : defaultImg;\r\n\r\n    const logutFunc = () => {\r\n        dispatch(logout());\r\n    }\r\n\r\n    return (\r\n        <HeaderComponent login={login} image={image} logutFunc={logutFunc}/>\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    login: string;\r\n    image: string;\r\n    logutFunc: () => void;\r\n}\r\n\r\nconst HeaderComponent: React.FC<Props> = ({login, image, logutFunc}) => {\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const [value, setValue] = React.useState<number | boolean>(false);\r\n\r\n    useEffect(() => {\r\n        switch (location.pathname) {\r\n            case '/work-chat':\r\n                setValue(0);\r\n                break;\r\n            case '/flood-chat':\r\n                setValue(1);\r\n                break;\r\n            default:\r\n                setValue(false);\r\n        }\r\n    }, [location.pathname]);\r\n\r\n    return (\r\n        <AppBar position=\"static\" className={s.wrapper}>\r\n            <Toolbar variant=\"dense\">\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    ТОТ systems\r\n                </Typography>\r\n                <Tabs\r\n                    value={value}\r\n                    indicatorColor=\"secondary\"\r\n                    variant=\"fullWidth\"\r\n                    className={classes.tabs}\r\n                >\r\n                    <Tab\r\n                        label=\"Work chat\"\r\n                        activeClassName=\"active-link\"\r\n                        to=\"/work-chat\"\r\n                        component={NavLink}\r\n                        disabled={!login}\r\n                    />\r\n                    <Tab\r\n                        label=\"Flood chat\"\r\n                        to=\"/flood-chat\"\r\n                        component={NavLink}\r\n                        disabled={!login}\r\n                    />\r\n                </Tabs>\r\n                {login && <div className={s.logout}>\r\n                    <p>{login}</p>\r\n                    <Avatar alt={`Avatar ${login}`} src={image}/>\r\n                    <Button\r\n                        color=\"secondary\"\r\n                        variant=\"outlined\"\r\n                        className={classes.button}\r\n                        onClick={logutFunc}\r\n                    >Logout</Button>\r\n                </div>}\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n","import { makeStyles } from '@material-ui/core';\r\n\r\nexport const useStyles = makeStyles({\r\n    control: {\r\n        marginBottom: '10px',\r\n        color: '#ffffff',\r\n    },\r\n    textarea: {\r\n        display: 'block',\r\n        width: '100%',\r\n        marginTop: '10px',\r\n        resize: 'none',\r\n        border: 'none',\r\n        borderBottom: '2px solid rgba(0, 0, 0, 0.22)',\r\n        '&:hover': {\r\n            outline: 'none',\r\n            borderBottomColor: '#000000'\r\n        },\r\n        '&:focus': {\r\n            outline: 'none',\r\n            borderBottomColor: '#f50057'\r\n        }\r\n    },\r\n});","import {Alert} from '@material-ui/lab';\r\nimport {ErrorMessage} from 'formik';\r\nimport React from 'react';\r\nimport {Input} from '@material-ui/core';\r\nimport styles from './FormsControls.module.scss';\r\nimport { useStyles } from './MaterialStyles';\r\n\r\nconst ErrorALert: React.FC = ({children}) => (\r\n    <Alert severity=\"error\"> {children} </Alert>\r\n)\r\n\r\nexport const InputControl: React.FC = ({field, form, ...props}: any) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={styles.fieldWrapper}>\r\n            <Input\r\n                className={classes.control}\r\n                fullWidth\r\n                {...field}\r\n                {...props}\r\n                color=\"secondary\"\r\n            />\r\n            <ErrorMessage component={ErrorALert} name={field.name}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport {Alert} from '@material-ui/lab';\r\nimport {Field, Form} from 'formik';\r\nimport {InputControl} from '../common/FormControls/FormControls';\r\nimport s from './AuthForm.module.scss';\r\n\r\ninterface Props {\r\n    title: string;\r\n    isLogin?: boolean;\r\n    error: string;\r\n    isSending: boolean;\r\n}\r\n\r\nexport const AuthForm: React.FC<Props> = ({\r\n                                              title,\r\n                                              isLogin = false,\r\n                                              error,\r\n                                              isSending\r\n                                          }) => {\r\n    const registrationPassword = !isLogin &&\r\n        <Field\r\n            component={InputControl}\r\n            name=\"repeatPassword\"\r\n            placeholder=\"Repeat password\"\r\n            type=\"password\"\r\n        />\r\n\r\n    const errorAlert = error &&\r\n        <Alert className={s.alert} severity=\"error\">\r\n            {error}\r\n        </Alert>\r\n\r\n    return (\r\n        <Form className={s.form}>\r\n            <Field\r\n                autoComplete=\"on\"\r\n                component={InputControl}\r\n                name=\"login\"\r\n                placeholder=\"Login\"\r\n                type=\"text\"\r\n            />\r\n            <Field\r\n                component={InputControl}\r\n                name=\"password\"\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n            />\r\n            {registrationPassword}\r\n            {errorAlert}\r\n            <Button\r\n                color=\"secondary\"\r\n                disabled={isSending}\r\n                type=\"submit\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n            >\r\n                {title}\r\n            </Button>\r\n        </Form>\r\n    )\r\n}","import { Formik } from 'formik';\r\nimport React from 'react';\r\nimport { AuthForm } from '../AuthForm/AuthForm';\r\nimport * as Yup from 'yup';\r\nimport {UserAuth} from \"../../api/models/user\";\r\n\r\ninterface Props {\r\n    handleSubmit: ({ login, password }: UserAuth) => void;\r\n    title: string;\r\n    isLogin?: boolean;\r\n    error: string;\r\n    isSending: boolean;\r\n}\r\n\r\nexport const LoginForm: React.FC<Props> = ({ handleSubmit, ...props }) => {\r\n    const registrateValidations = Yup.object({\r\n        login: Yup.string()\r\n            .required('Required'),\r\n        password: Yup.string()\r\n            .required('Required'),\r\n    });\r\n\r\n    const fields: UserAuth = {\r\n        login: '',\r\n        password: '',\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={fields}\r\n            onSubmit={handleSubmit}\r\n            validationSchema={registrateValidations}\r\n        >\r\n            <AuthForm {...props} />\r\n        </Formik>\r\n    )\r\n}","export const passwordsMatch: any = (value: string, form: any): boolean => (\r\n    value === form.parent.password\r\n)","import {Formik} from 'formik';\r\nimport React from 'react';\r\nimport {AuthForm} from '../AuthForm/AuthForm';\r\nimport {passwordsMatch} from '../../utils/validators';\r\nimport * as Yup from 'yup';\r\nimport {UserAuth} from \"../../api/models/user\";\r\n\r\ninterface Props {\r\n    handleSubmit: ({login, password}: UserAuth) => void;\r\n    title: string;\r\n    error: string;\r\n    isSending: boolean;\r\n}\r\n\r\ninterface RegData extends UserAuth {\r\n    repeatPassword: string;\r\n}\r\n\r\nexport const RegistrationForm: React.FC<Props> = ({handleSubmit, ...props}) => {\r\n    const registrateValidations = Yup.object({\r\n        login: Yup.string()\r\n            .required('Required'),\r\n        password: Yup.string()\r\n            .min(9, 'Must be 9 characters or more')\r\n            .required('Required'),\r\n        repeatPassword: Yup.string()\r\n            .min(9, 'Must be 9 characters or more')\r\n            .test('check password', 'Passwords don\\'t match', passwordsMatch)\r\n            .required('Required'),\r\n    });\r\n\r\n    const fields: RegData = {\r\n        login: '',\r\n        password: '',\r\n        repeatPassword: '',\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={fields}\r\n            onSubmit={handleSubmit}\r\n            validationSchema={registrateValidations}\r\n        >\r\n            <AuthForm {...props} />\r\n        </Formik>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport s from './AuthPage.module.scss';\r\nimport {LoginForm} from '../LoginForm/LoginFrom';\r\nimport {RegistrationForm} from '../RegistrationForm/RegistrationFrom';\r\nimport {UserAuth} from '../../api/models/user';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {login as loginThunk, registration} from '../../redux/auth/auth';\r\nimport {gerIsSendingAuth, getErrorMessage, getIsAuth} from '../../redux/auth/selectors';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const AuthPage: React.FC = (props) => {\r\n    const error = useSelector(getErrorMessage);\r\n    const isSending = useSelector(gerIsSendingAuth);\r\n    const isAuth = useSelector(getIsAuth);\r\n    const dispatch = useDispatch();\r\n\r\n    const loginFunc = ({login, password}: UserAuth) => {\r\n        dispatch(loginThunk(login, password));\r\n    }\r\n\r\n    const registrationtFunc = ({login, password}: UserAuth) => {\r\n        dispatch(registration(login, password));\r\n    }\r\n\r\n    return (\r\n        <AuthPageComponent\r\n            loginFunc={loginFunc}\r\n            registrationtFunc={registrationtFunc}\r\n            error={error}\r\n            isSending={isSending}\r\n            isAuth={isAuth}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    loginFunc: (userData: UserAuth) => void,\r\n    registrationtFunc: (userData: UserAuth) => void,\r\n    error: string,\r\n    isSending: boolean,\r\n    isAuth: boolean,\r\n}\r\n\r\nconst AuthPageComponent: React.FC<Props> = ({\r\n    loginFunc,\r\n    registrationtFunc,\r\n    error,\r\n    isSending,\r\n    isAuth,\r\n}) => {\r\n    const [isLogin, setIsLogin] = useState(true);\r\n    const btnText = isLogin ? 'Registration' : 'Login';\r\n    const formTitle = !isLogin ? 'Registration' : 'Login';\r\n\r\n    const toggleForm = () => {\r\n        setIsLogin(!isLogin);\r\n    }\r\n\r\n    const onLogin = (userData: UserAuth): void => {\r\n        loginFunc(userData);\r\n    }\r\n\r\n    const onRegistrationt = (userData: UserAuth): void => {\r\n        registrationtFunc(userData);\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to='/work-chat' />\r\n    }\r\n\r\n    const form = isLogin ?\r\n        <LoginForm\r\n            error={error}\r\n            handleSubmit={onLogin}\r\n            isLogin={isLogin}\r\n            isSending={isSending}\r\n            title={formTitle}\r\n        /> : <RegistrationForm\r\n            error={error}\r\n            handleSubmit={onRegistrationt}\r\n            isSending={isSending}\r\n            title={formTitle}\r\n        />\r\n\r\n    return (\r\n        <section className={`container ${s.wrapper}`}>\r\n            <div>\r\n                <h2>\r\n                    {formTitle} form\r\n                </h2>\r\n                {form}\r\n                <Button onClick={toggleForm} color=\"secondary\">\r\n                    Go to {btnText}\r\n                </Button>\r\n            </div>\r\n        </section>\r\n    )\r\n}","import {createAction, createReducer} from '@reduxjs/toolkit';\r\nimport {initialApp} from '../auth/auth';\r\nimport {AppDispatch} from '../redux-store';\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n};\r\n\r\nconst initAppAction = createAction('INITIALIZED_SUCCESS/APP');\r\n\r\nexport const initial = createReducer(initialState, {\r\n    [initAppAction.type]: (state, action) => {\r\n        state.initialized = true;\r\n    },\r\n});\r\n\r\nexport const initializeApp = () => async (dispatch: AppDispatch): Promise<void> => {\r\n    await dispatch(initialApp());\r\n\r\n    dispatch(initAppAction());\r\n}","import { RootState } from '../redux-store';\r\n\r\nexport const getInitialized = (state: RootState): boolean => (\r\n    state.initial.initialized\r\n)\r\n","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nimport {getIsAuth} from '../redux/auth/selectors';\r\n\r\nexport const withAuthRedirect = (Component: React.FC<any>) => (props: any) => {\r\n    const isAuth = useSelector(getIsAuth);\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to=\"/auth\"/>\r\n    }\r\n\r\n    return <Component {...props} />\r\n}\r\n","import { makeStyles } from '@material-ui/core';\r\n\r\nexport const useStyles = makeStyles({\r\n    edit: {\r\n        color: '#2f39a4',\r\n    },\r\n    icon: {\r\n        marginRight: '10px'\r\n    }\r\n});","import { Button, Menu, MenuItem } from '@material-ui/core';\r\nimport DragHandleIcon from '@material-ui/icons/DragHandle';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport React from 'react';\r\nimport { useStyles } from './MaterialStyles';\r\n\r\ninterface Props {\r\n    onEditMessage: () => void,\r\n    onDeleteMessage: () => void,\r\n}\r\n\r\nexport const MessageControls: React.FC<Props> = ({\r\n    onEditMessage,\r\n    onDeleteMessage\r\n}) => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = (): void => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const onEditBtnClic = (): void => {\r\n        onEditMessage();\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                aria-controls=\"message-menu\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleClick}\r\n            >\r\n                <DragHandleIcon/>\r\n            </Button>\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={onEditBtnClic}>\r\n                    <EditIcon\r\n                        className={`${classes.edit} ${classes.icon}`}\r\n                    />\r\n                    Edit\r\n                </MenuItem>\r\n                <MenuItem onClick={onDeleteMessage}>\r\n                    <DeleteIcon\r\n                        className={classes.icon}\r\n                        color=\"secondary\"\r\n                    />\r\n                    Delete\r\n                </MenuItem>\r\n            </Menu>\r\n        </>\r\n    )\r\n}","import { makeStyles } from '@material-ui/core';\r\n\r\nexport const useStyles = makeStyles({\r\n    avatar: {\r\n        width: '100px',\r\n        height: '100px',\r\n        border: '2px solid #f40000',\r\n        '& img': {\r\n            objectFit: 'fill'\r\n        }\r\n    },\r\n    message: {\r\n        width: '100%',\r\n        margin: '0 30px',\r\n    },\r\n    reaction: {\r\n        transition: 'all 0.3s',\r\n        display: 'flex',\r\n        alignItems: 'end',\r\n        color: '#008000',\r\n        opacity: '0.4',\r\n        '&:hover': {\r\n            opacity: '1',\r\n        }\r\n    },\r\n    reactionActive: {\r\n        opacity: '1',\r\n    }\r\n});","import React from 'react';\r\nimport parse from 'html-react-parser'\r\nimport { Avatar, Button, Card, CardContent } from '@material-ui/core';\r\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined';\r\nimport s from './MessageItem.module.scss';\r\nimport { Message } from '../../api/models/message';\r\nimport { useSelector } from 'react-redux';\r\nimport { getDefaultImg } from '../../redux/auth/selectors';\r\nimport { MessageControls } from '../MessageControls/MessageControls';\r\nimport { User } from '../../api/models/user';\r\nimport { useStyles } from './MaterialStyles';\r\n\r\ninterface Props {\r\n    messageData: Message;\r\n    currentUser: User;\r\n    setEditMessage: (messageData: Message) => void;\r\n    onDeleteMessage: (messageId: string) => void;\r\n    onAddReaction: (likesIds: string[], messageId: string) => void;\r\n    onRemoveReaction: (likesIds: string[], messageId: string) => void;\r\n}\r\n\r\nexport const MessageItem: React.FC<Props> = (props) => {\r\n    const defaultImg = useSelector(getDefaultImg);\r\n\r\n    return <MessageItemComponent {...props} defaultImg={defaultImg}/>\r\n}\r\n\r\ninterface ComponentProps extends Props {\r\n    defaultImg: string;\r\n}\r\n\r\nconst MessageItemComponent: React.FC<ComponentProps> = ({\r\n    messageData,\r\n    currentUser,\r\n    defaultImg,\r\n    setEditMessage,\r\n    onDeleteMessage,\r\n    onAddReaction,\r\n    onRemoveReaction,\r\n}) => {\r\n    const classes = useStyles();\r\n    const imgUrl = messageData.userAvatar ? messageData.userAvatar : defaultImg;\r\n    const isCurrentUser = currentUser.id === messageData.userId;\r\n    const isLiked = messageData.likesIds.some(id => id === currentUser.id);\r\n\r\n    const onEditMessage = (): void => {\r\n        setEditMessage(messageData);\r\n    }\r\n\r\n    const deleteMessage = (): void => {\r\n        onDeleteMessage(messageData.id);\r\n    }\r\n\r\n    const onReactionClick = (): void => {\r\n        if (isLiked) {\r\n            onRemoveReaction(messageData.likesIds, messageData.id);\r\n            return;\r\n        }\r\n\r\n        onAddReaction(messageData.likesIds, messageData.id);\r\n    }\r\n\r\n    const controls = isCurrentUser &&\r\n        <MessageControls\r\n            onEditMessage={onEditMessage}\r\n            onDeleteMessage={deleteMessage}\r\n        />;\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <Avatar\r\n                alt={`User avatar ${messageData.userLogin}`}\r\n                src={imgUrl}\r\n                className={classes.avatar}/>\r\n            <Card className={`${classes.message} ${s.card}`}>\r\n                <CardContent>\r\n                    <h3 className={s.userName}>\r\n                        {messageData.userLogin}\r\n                    </h3>\r\n                    {parse(messageData.message)}\r\n\r\n                    <div className={s.stateWrapper}>\r\n                        <p className={s.date}>\r\n                            {messageData.date}\r\n                        </p>\r\n\r\n                        <Button\r\n                            endIcon={<ThumbUpAltOutlinedIcon/>}\r\n                            className={`\r\n                            ${classes.reaction} \r\n                            ${isLiked && classes.reactionActive}\r\n                            `}\r\n                            onClick={onReactionClick}\r\n                        >\r\n                            {messageData.likesIds.length}\r\n                        </Button>\r\n                    </div>\r\n\r\n                    <div className={s.controls}>\r\n                        {controls}\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}","import { makeStyles } from '@material-ui/core';\r\n\r\nexport const useStyles = makeStyles({\r\n    btn: {\r\n        borderRadius: '0',\r\n    },\r\n});","import ReactQuill from 'react-quill';\r\nimport s from './MessageForm.module.scss';\r\nimport { Button } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Message } from '../../api/models/message';\r\nimport { useStyles } from './MaterialStyles';\r\n\r\ninterface Props {\r\n    onSendMessage: (message: string) => void;\r\n    isEdit: boolean;\r\n    messageToEdit: Message | null;\r\n    removeEditMessage: () => void;\r\n    onUpdateMessage: (message: string, messageId: string) => void;\r\n}\r\n\r\nexport const MessageForm: React.FC<Props> = ({\r\n    onSendMessage,\r\n    isEdit,\r\n    messageToEdit,\r\n    removeEditMessage,\r\n    onUpdateMessage,\r\n}) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('');\r\n    const btnText = isEdit ? 'Save message' : 'Send message';\r\n\r\n    useEffect(() => {\r\n        if (messageToEdit) {\r\n            setMessage(messageToEdit.message);\r\n        }\r\n    }, [messageToEdit]);\r\n\r\n    const onMessageChange = (evt: string): void => {\r\n        if (evt === '<p><br></p>') {\r\n            evt = '';\r\n        }\r\n        setMessage(evt);\r\n    }\r\n\r\n    const onSendBtnClick = (): void => {\r\n        if (isEdit) {\r\n            onUpdateMessage(message, messageToEdit!.id);\r\n            removeEditMessage();\r\n        } else {\r\n            onSendMessage(message);\r\n        }\r\n        setMessage('');\r\n    }\r\n\r\n    const onCancelClick = (): void => {\r\n        removeEditMessage();\r\n        setMessage('');\r\n    }\r\n\r\n    const cancelBtn = isEdit &&\r\n        <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            className={classes.btn}\r\n            onClick={onCancelClick}\r\n        >\r\n            Cancel\r\n        </Button>;\r\n\r\n    return (\r\n        <div>\r\n            <ReactQuill\r\n                theme=\"snow\"\r\n                className={s.messageControl}\r\n                value={message}\r\n                onChange={onMessageChange}\r\n            />\r\n            <div className={s.btnsWrapper}>\r\n                {cancelBtn}\r\n                <Button\r\n                    color=\"secondary\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    onClick={onSendBtnClick}\r\n                    disabled={message === ''}\r\n                    className={classes.btn}\r\n                >\r\n                    {btnText}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { MessageItem } from '../MessageItem/MessageItem';\r\nimport s from './Chat.module.scss';\r\nimport { ChatPageProps } from '../../api/models/chatPageProps';\r\nimport { MessageForm } from '../MessageForm/MessageForm';\r\nimport { Message } from '../../api/models/message';\r\n\r\ninterface Props extends ChatPageProps {\r\n    title: string,\r\n}\r\n\r\nexport const Chat: React.FC<Props> = ({\r\n    title,\r\n    messages,\r\n    onSendMessage,\r\n    currentUser,\r\n    onUpdateMessage,\r\n    onDeleteMessage,\r\n    onAddReaction,\r\n    onRemoveReaction,\r\n}) => {\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [messageToEdit, setMessageToEdit] = useState<Message | null>(null);\r\n    const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n    const scrollToBottom = (): void => {\r\n        messagesEndRef.current!.scrollIntoView({behavior: 'smooth'})\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n    }, [messages.length]);\r\n\r\n    const setEditMessage = (messageData: Message) => {\r\n        setIsEdit(true);\r\n        setMessageToEdit(messageData);\r\n    }\r\n\r\n    const removeEditMessage = () => {\r\n        setIsEdit(false);\r\n        setMessageToEdit(null);\r\n    }\r\n\r\n    const messagesList = messages.map(message => (\r\n        <MessageItem\r\n            key={message.id}\r\n            messageData={message}\r\n            currentUser={currentUser}\r\n            setEditMessage={setEditMessage}\r\n            onDeleteMessage={onDeleteMessage}\r\n            onAddReaction={onAddReaction}\r\n            onRemoveReaction={onRemoveReaction}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <section className={`container ${s.wrapper}`}>\r\n            <h2 className={s.title}>\r\n                {title}\r\n            </h2>\r\n            <div className={s.chatWrapper}>\r\n                {messagesList}\r\n\r\n                <div ref={messagesEndRef}/>\r\n            </div>\r\n            <MessageForm\r\n                onSendMessage={onSendMessage}\r\n                onUpdateMessage={onUpdateMessage}\r\n                isEdit={isEdit}\r\n                messageToEdit={messageToEdit}\r\n                removeEditMessage={removeEditMessage}\r\n            />\r\n        </section>\r\n    )\r\n}\r\n","import firebase from 'firebase';\r\nimport { db } from './firebase';\r\nimport { MessageDto } from '../dtos/message-dto';\r\n\r\nconst workChatRequest = db.collection('work-chat');\r\nconst floodChatRequest = db.collection('flood-chat');\r\n\r\ntype Request = firebase.firestore.CollectionReference<firebase.firestore.DocumentData>;\r\n\r\nexport class ChatAPI {\r\n    public mainRequest: Request;\r\n\r\n    constructor(mainRequsest: Request) {\r\n        this.mainRequest = mainRequsest;\r\n    }\r\n\r\n    getMessages() {\r\n        return this.mainRequest.orderBy('date', 'asc');\r\n    }\r\n\r\n    sendMessage(message: MessageDto) {\r\n        return this.mainRequest.add(message);\r\n    }\r\n\r\n    updateMessage(message: string, id: string) {\r\n        return this.mainRequest.doc(id).set({message}, {merge: true});\r\n    }\r\n\r\n    setMessageReactions(likesIds: string[], id: string) {\r\n        return this.mainRequest.doc(id).set({likesIds}, {merge: true});\r\n    }\r\n\r\n    deleteMessage(id: string) {\r\n        return this.mainRequest.doc(id).delete();\r\n    }\r\n}\r\n\r\nexport const workChatAPI = new ChatAPI(workChatRequest);\r\nexport const floodChatAPI = new ChatAPI(floodChatRequest);","import {ConstructorInitArg} from '../../utils/constructorInitArg';\r\n\r\nexport class Message {\r\n    public message: string;\r\n    public userAvatar: string;\r\n    public userLogin: string;\r\n    public likesIds: string[];\r\n    public userId: string;\r\n    public date: Date;\r\n    public id: string;\r\n\r\n    constructor(data: ConstructorInitArg<Message>) {\r\n        this.message = data.message;\r\n        this.userAvatar = data.userAvatar;\r\n        this.userLogin = data.userLogin;\r\n        this.userId = data.userId;\r\n        this.likesIds = data.likesIds;\r\n        this.date = data.date;\r\n        this.id = data.id;\r\n    }\r\n}","import { formatDate } from '../../utils/formatDate';\r\nimport {MessageDto} from '../dtos/message-dto';\r\nimport { Message } from '../models/message';\r\nimport { User } from '../models/user';\r\n\r\nexport const MessageMapper = {\r\n    getMessage(messageData: MessageDto, author: User, id: string): Message {\r\n        let date: any = messageData.date;\r\n        date = formatDate(date.toDate().toString());\r\n\r\n        return new Message({\r\n            message: messageData.message,\r\n            userAvatar: author.imgUrl,\r\n            userLogin: author.login,\r\n            userId: author.id,\r\n            likesIds: messageData.likesIds,\r\n            date: date,\r\n            id: id,\r\n        });\r\n    },\r\n    getMessageDto(messageData: Message, userId: string): MessageDto {\r\n        return {\r\n            message: messageData.message,\r\n            userId: userId,\r\n            likesIds: messageData.likesIds,\r\n            date: messageData.date,\r\n        };\r\n    },\r\n}","export const formatDate = (string: string) => (\r\n    new Date(string).toLocaleDateString([], {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n    })\r\n);","import { AppDispatch } from '../redux/redux-store';\r\nimport { ChatAPI } from '../api/firebase/chatAPI';\r\nimport { Message } from '../api/models/message';\r\nimport { MessageDto } from '../api/dtos/message-dto';\r\nimport { authAPI } from '../api/firebase/authAPI';\r\nimport { UserDto } from '../api/dtos/user-dto';\r\nimport { MessageMapper } from '../api/mappers/message-mapper';\r\nimport { ActionCreatorWithPayload } from '@reduxjs/toolkit';\r\nimport { UserMapper } from '../api/mappers/user-mapper';\r\n\r\ntype SetMessageCreatorType = (\r\n    api: ChatAPI,\r\n    addAction: ActionCreatorWithPayload<Message>,\r\n    deleteAction: ActionCreatorWithPayload<string>,\r\n) => (dispatch: AppDispatch) => () => void;\r\n\r\nexport const setMessagesCreator: SetMessageCreatorType = (\r\n    api,\r\n    addAction,\r\n    deleteAction\r\n) => (dispatch) => {\r\n    return api.getMessages().onSnapshot((response) => {\r\n        response.docChanges().forEach(async (messageResponse: any) => {\r\n            const {id} = messageResponse.doc;\r\n            const messageDto: MessageDto = messageResponse.doc.data();\r\n\r\n            const authorResponse: any = await authAPI.getUser(messageDto.userId);\r\n            const authorDto: UserDto = authorResponse.data();\r\n            const authorId = authorResponse.id;\r\n            const author = UserMapper.getUser(authorDto, authorId);\r\n\r\n            const message = MessageMapper.getMessage(messageDto, author, id);\r\n\r\n            if (messageResponse.type === 'removed') {\r\n                dispatch(deleteAction(id));\r\n            } else  {\r\n                dispatch(addAction(message));\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\ntype SendMessageCreatorType = (\r\n    api: ChatAPI\r\n) => (message: string, userId: string) => void;\r\n\r\nexport const sendMessageCreator: SendMessageCreatorType = (\r\n    api\r\n) => (message, userId) => {\r\n    api.sendMessage({\r\n        message,\r\n        likesIds: [],\r\n        userId,\r\n        date: new Date(),\r\n    });\r\n}\r\n\r\ntype UpdateMessageCreatorType = (\r\n    api: ChatAPI\r\n) => (message: string, messageId: string) => void;\r\n\r\nexport const updateMessageCreator: UpdateMessageCreatorType = (\r\n    api\r\n) => (message, messageId) => {\r\n    api.updateMessage(\r\n        message,\r\n        messageId,\r\n    );\r\n}\r\n\r\ntype AddMessageReactionType = (\r\n    api: ChatAPI\r\n) => (likesIds: string[], messageId: string, uesrId: string) => void;\r\n\r\nexport const addMessageReactionCreator: AddMessageReactionType = (\r\n    api\r\n) => (likesIds, messageId, uesrId) => {\r\n    api.setMessageReactions(\r\n        [...likesIds, uesrId],\r\n        messageId,\r\n    );\r\n}\r\n\r\ntype RemoveMessageReactionType = (\r\n    api: ChatAPI\r\n) => (likesIds: string[], messageId: string, uesrId: string) => void;\r\n\r\nexport const removeMessageReactionCreator: RemoveMessageReactionType = (\r\n    api\r\n) => (likesIds, messageId, uesrId) => {\r\n    likesIds = likesIds.filter(id => id !== uesrId);\r\n\r\n    api.setMessageReactions(\r\n        likesIds,\r\n        messageId,\r\n    );\r\n}\r\n\r\ntype DeleteMessageCreatorType = (\r\n    api: ChatAPI\r\n) => (messageId: string) => void;\r\n\r\nexport const deleteMessageCreator: DeleteMessageCreatorType = (\r\n    api\r\n) => (messageId: string) => {\r\n    api.deleteMessage(messageId);\r\n}","import { Message } from '../api/models/message';\r\n\r\nexport const createNewMessagesList = (oldMessages: Message[], newMessage: Message): Message[] => {\r\n    const messages = [...oldMessages];\r\n\r\n    let changeMessageIndex = 0;\r\n\r\n    const notUnicMessage = messages.some((message, index) => {\r\n        const isNotUnic = message.id === newMessage.id;\r\n\r\n        if (isNotUnic) {\r\n            changeMessageIndex = index;\r\n        }\r\n\r\n        return isNotUnic;\r\n    });\r\n\r\n    if (notUnicMessage) {\r\n        messages[changeMessageIndex] = newMessage;\r\n    } else {\r\n        messages.push(newMessage);\r\n    }\r\n\r\n    return messages;\r\n}\r\n\r\nexport const removeMessage = (messages: Message[], id: string): Message[] => {\r\n    const newMessages = [...messages];\r\n\r\n    newMessages.forEach((message, i) => {\r\n        if (message.id === id) {\r\n            newMessages.splice(i, 1);\r\n            return;\r\n        }\r\n    });\r\n\r\n    return newMessages;\r\n}\r\n","import { createAction, createReducer } from '@reduxjs/toolkit';\r\nimport { Message } from '../../api/models/message';\r\nimport { workChatAPI } from '../../api/firebase/chatAPI';\r\nimport {\r\n    deleteMessageCreator, sendMessageCreator, addMessageReactionCreator, setMessagesCreator, updateMessageCreator, removeMessageReactionCreator\r\n} from '../../utils/chatFuncsCreators';\r\nimport { createNewMessagesList, removeMessage } from '../../utils/messagesListUtils';\r\n\r\nconst initialState = {\r\n    messages: [] as Message[],\r\n}\r\n\r\nconst setMessageAction = createAction<Message>('SET_MESSAGES/WORK-CHAT');\r\nconst deleteMessageAction = createAction<string>('DELETE_MESSAGES/WORK-CHAT');\r\n\r\nexport const workChat = createReducer(initialState, {\r\n    [setMessageAction.type]: (state, action) => {\r\n        state.messages = createNewMessagesList(state.messages, action.payload);\r\n        ;\r\n    },\r\n    [deleteMessageAction.type]: (state, action) => {\r\n        state.messages = removeMessage(state.messages, action.payload);\r\n    }\r\n});\r\n\r\nexport const setMessagesSub = setMessagesCreator(\r\n    workChatAPI,\r\n    setMessageAction,\r\n    deleteMessageAction\r\n);\r\nexport const sendMessage = sendMessageCreator(workChatAPI);\r\nexport const updateMessage = updateMessageCreator(workChatAPI);\r\nexport const addMessageReaction = addMessageReactionCreator(workChatAPI);\r\nexport const removeMessageReaction = removeMessageReactionCreator(workChatAPI);\r\nexport const deleteMessage = deleteMessageCreator(workChatAPI);","import { RootState } from '../redux-store';\r\nimport { Message } from '../../api/models/message';\r\n\r\nexport const getMessages = (state: RootState): Message[] | null => (\r\n    state.workChat.messages\r\n)","import React, { useEffect } from 'react';\r\nimport { withAuthRedirect } from '../../hocs/withAuthRedirect';\r\nimport { Chat } from '../Chat/Chat';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    addMessageReaction, removeMessageReaction, deleteMessage, sendMessage, setMessagesSub, updateMessage\r\n} from '../../redux/workChat/workChat';\r\nimport { getMessages } from '../../redux/workChat/selectors';\r\nimport { ChatPageProps } from '../../api/models/chatPageProps';\r\nimport { getActiveUser } from '../../redux/auth/selectors';\r\n\r\nconst WorkChatPageApi = () => {\r\n    const currentUser = useSelector(getActiveUser);\r\n    let messages = useSelector(getMessages);\r\n    messages = messages ? messages : [];\r\n    const dispatch = useDispatch();\r\n\r\n    /** Return unsubscribe func */\r\n    useEffect(() => setMessagesSub(dispatch), []);\r\n\r\n    const sendMessageFunc = (message: string): void => {\r\n        sendMessage(message, currentUser!.id);\r\n    }\r\n\r\n    const addMessageReactionFunc = (\r\n        likesIds: string[],\r\n        messageId: string,\r\n    ): void => {\r\n        addMessageReaction(likesIds, messageId, currentUser!.id);\r\n    }\r\n\r\n    const removeMessageReactionFunc = (\r\n        likesIds: string[],\r\n        messageId: string,\r\n    ): void => {\r\n        removeMessageReaction(likesIds, messageId, currentUser!.id);\r\n    }\r\n\r\n    return (\r\n        <WorkChatPageComponent\r\n            messages={messages}\r\n            onDeleteMessage={deleteMessage}\r\n            onSendMessage={sendMessageFunc}\r\n            onUpdateMessage={updateMessage}\r\n            onAddReaction={addMessageReactionFunc}\r\n            onRemoveReaction={removeMessageReactionFunc}\r\n            currentUser={currentUser!}\r\n        />\r\n    )\r\n}\r\n\r\nconst WorkChatPageComponent: React.FC<ChatPageProps> = (props) => (\r\n    <Chat title={'Work chat'} {...props}/>\r\n)\r\n\r\nexport const WorkChatPage = withAuthRedirect(WorkChatPageApi);","import { RootState } from '../redux-store';\r\nimport { Message } from '../../api/models/message';\r\n\r\nexport const getMessages = (state: RootState): Message[] | null => (\r\n    state.floodChat.messages\r\n)","import { createAction, createReducer } from '@reduxjs/toolkit';\r\nimport { Message } from '../../api/models/message';\r\nimport { floodChatAPI } from '../../api/firebase/chatAPI';\r\nimport {\r\n    addMessageReactionCreator,\r\n    deleteMessageCreator, removeMessageReactionCreator, sendMessageCreator,\r\n    setMessagesCreator, updateMessageCreator\r\n} from '../../utils/chatFuncsCreators';\r\nimport { createNewMessagesList, removeMessage } from '../../utils/messagesListUtils';\r\n\r\nconst initialState = {\r\n    messages: [] as Message[],\r\n}\r\n\r\nconst setMessageAction = createAction<Message>('SET_MESSAGES/FLOOD-CHAT');\r\nconst deleteMessageAction = createAction<string>('DELETE_MESSAGES/FLOOD-CHAT');\r\n\r\nexport const floodChat = createReducer(initialState, {\r\n    [setMessageAction.type]: (state, action) => {\r\n        state.messages = createNewMessagesList(state.messages, action.payload);\r\n    },\r\n    [deleteMessageAction.type]: (state, action) => {\r\n        state.messages = removeMessage(state.messages, action.payload);\r\n    }\r\n});\r\n\r\nexport const setMessagesSub = setMessagesCreator(\r\n    floodChatAPI,\r\n    setMessageAction,\r\n    deleteMessageAction\r\n);\r\nexport const sendMessage = sendMessageCreator(floodChatAPI);\r\nexport const updateMessage = updateMessageCreator(floodChatAPI);\r\nexport const addMessageReaction = addMessageReactionCreator(floodChatAPI);\r\nexport const removeMessageReaction = removeMessageReactionCreator(floodChatAPI);\r\nexport const deleteMessage = deleteMessageCreator(floodChatAPI);","import React, { useEffect } from 'react';\r\nimport { withAuthRedirect } from '../../hocs/withAuthRedirect';\r\nimport { Chat } from '../Chat/Chat';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getMessages } from '../../redux/floodChat/selectors';\r\nimport {\r\n    addMessageReaction, deleteMessage, removeMessageReaction, sendMessage, setMessagesSub, updateMessage\r\n} from '../../redux/floodChat/floodChat';\r\nimport { ChatPageProps } from '../../api/models/chatPageProps';\r\nimport { getActiveUser } from '../../redux/auth/selectors';\r\n\r\nconst FloodChatPageApi = () => {\r\n    const currentUser = useSelector(getActiveUser);\r\n    let messages = useSelector(getMessages);\r\n    messages = messages ? messages : [];\r\n    const dispatch = useDispatch();\r\n\r\n    /** Return unsubscribe func */\r\n    useEffect(() => setMessagesSub(dispatch), []);\r\n\r\n    const sendMessageFunc = (message: string): void => {\r\n        sendMessage(message, currentUser!.id);\r\n    }\r\n\r\n    const addMessageReactionFunc = (\r\n        likesIds: string[],\r\n        messageId: string,\r\n    ): void => {\r\n        addMessageReaction(likesIds, messageId, currentUser!.id);\r\n    }\r\n\r\n    const removeMessageReactionFunc = (\r\n        likesIds: string[],\r\n        messageId: string,\r\n    ): void => {\r\n        removeMessageReaction(likesIds, messageId, currentUser!.id);\r\n    }\r\n\r\n    return (\r\n        <FloodChatPageComponent\r\n            messages={messages}\r\n            onDeleteMessage={deleteMessage}\r\n            onSendMessage={sendMessageFunc}\r\n            onUpdateMessage={updateMessage}\r\n            onAddReaction={addMessageReactionFunc}\r\n            onRemoveReaction={removeMessageReactionFunc}\r\n            currentUser={currentUser!}\r\n        />\r\n    )\r\n}\r\n\r\nconst FloodChatPageComponent: React.FC<ChatPageProps> = (props) => (\r\n    <Chat title={'Flood chat'} {...props}/>\r\n)\r\n\r\nexport const FloodChatPage = withAuthRedirect(FloodChatPageApi);","import { CircularProgress } from '@material-ui/core';\r\nimport React from 'react';\r\nimport s from './Loader.module.scss';\r\n\r\nexport const Loader: React.FC = () => {\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <CircularProgress color=\"secondary\" size={100}/>\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport React, { useEffect} from 'react';\nimport { Header } from './components/Header/Header';\nimport { AuthPage } from './components/AuthPage/AuthPage';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { initializeApp } from './redux/app/app';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getInitialized } from './redux/app/selectors';\nimport { WorkChatPage } from './components/WorkChatPage/WorkChatPage';\nimport { FloodChatPage } from './components/FloodChatPage/FloodChatPage';\nimport { Loader } from './components/common/Loader/Loader';\n\nexport const App: React.FC = (props) => {\n    const initialized = useSelector(getInitialized);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(initializeApp());\n    }, []);\n\n    return (\n        initialized ?\n            <AppComponent {...props} /> :\n            <Loader/>\n    )\n}\n\nconst AppComponent: React.FC = () => {\n    return (\n        <>\n            <Header/>\n            <Switch>\n                <Route path=\"/\" render={() => <Redirect to=\"/work-chat\"/>} exact/>\n                <Route path=\"/auth\" render={() => <AuthPage/>}/>\n                <Route path=\"/work-chat\" render={() => <WorkChatPage/>}/>\n                <Route path=\"/flood-chat\" render={() => <FloodChatPage/>}/>\n            </Switch>\n        </>\n    )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, configureStore as crateStore, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport {auth} from './auth/auth';\r\nimport {initial} from './app/app';\r\nimport { workChat } from './workChat/workChat';\r\nimport { floodChat } from './floodChat/floodChat';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth,\r\n    initial,\r\n    workChat,\r\n    floodChat\r\n});\r\n\r\nexport const store = crateStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware({\r\n        serializableCheck: false\r\n    }),\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/redux-store';\n\nconst mainTheme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#303030',\n        },\n    },\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <ThemeProvider theme={mainTheme}>\n                <App/>\n            </ThemeProvider>\n        </BrowserRouter>\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MessageItem_wrapper__2eweJ\",\"userName\":\"MessageItem_userName__w6riP\",\"card\":\"MessageItem_card__2KXyZ\",\"stateWrapper\":\"MessageItem_stateWrapper__2mQIq\",\"date\":\"MessageItem_date__2YpDi\",\"controls\":\"MessageItem_controls__2ck3_\"};"],"sourceRoot":""}